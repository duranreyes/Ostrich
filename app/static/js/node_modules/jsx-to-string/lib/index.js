'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var stringify = require('json-stringify-pretty-compact');

function isDefaultProp(defaultProps, key, value) {
  if (!defaultProps) {
    return false;
  }
  return defaultProps[key] === value;
}

function jsxToString(component, options) {

  var baseOpts = {
    displayName: component.type.displayName || component.type.name || component.type,
    ignoreProps: [],
    keyValueOverride: {},
    spacing: 0
  };

  var opts = _extends({}, baseOpts, options);

  var componentData = {
    name: opts.displayName
  };

  delete opts.displayName;

  if (component.props) {
    componentData.props = Object.keys(component.props).map(function (key) {
      if (key === 'children' || isDefaultProp(component.type.defaultProps, key, component.props[key]) || opts.ignoreProps.indexOf(key) > -1) {
        return '';
      } else {
        var value = component.props[key];
        if (typeof value === 'string') {
          return ' ' + key + '="' + value + '"';
        } else if (React.isValidElement(value)) {
          value = jsxToString(value, opts);
        } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
          value = stringify(value);
        } else if (typeof value === 'function') {
          value = '...';
        }
        return ' ' + key + '={' + (opts.keyValueOverride[key] || value) + '}';
      }
    }).join('');
  }

  if (component.props.children) {
    opts.spacing += 2;
    var indentation = new Array(opts.spacing + 1).join(' ');
    if (typeof component.props.children === 'string') {
      componentData.children = component.props.children;
    } else if (_typeof(component.props.children) === 'object' && !Array.isArray(component.props.children)) {
      componentData.children = jsxToString(component.props.children, opts);
    } else {
      componentData.children = component.props.children.filter(function (child) {
        return child;
      }).map(function (child) {
        return typeof child === 'string' ? child : jsxToString(child, opts);
      }).join('\n' + indentation);
    }
    return '<' + componentData.name + componentData.props + '>\n' + indentation + componentData.children + '\n' + indentation.slice(0, -2) + '</' + componentData.name + '>';
  } else {
    return '<' + componentData.name + componentData.props + ' />';
  }
}

exports.default = jsxToString;
module.exports = exports['default'];